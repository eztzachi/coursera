quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, count > 465)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(count))
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
?chain
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students
students2
res<-gather(students, sex_count, count, -grade)
res<-gather(students2, sex_count, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
x<-gather(stocks, stock, price, -time)
spread(x, stock, price)
gather(students3, class, grade, class1:class5, na.rm = TRUE)
submit()
extract_numeric("vlass5")
extract_numeric("class5")
?mutate
?extract_numeric
?mutate
?mutate
submit()
submit()
students4
submit()
submit()
submit()
?unique()
?unique
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed, failed)
sat
select(sat,-contains("total"))
x1<-select(sat,-contains("total"))
x1
x2<-gather(x1, part_sex, count, -score_range)
x2
separate(x2, part_sex)
separate(x2, part_sex, c("part", "sex"))
submit()
x3<-separate(x2, part_sex, c("part", "sex"))
x4<-group_by(x3, part, sex)
x4
?group_by
x3
x4
submit()
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1975)
mdy("March 12, 1975")
mdy
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=hour(now()), minutes=minute(now()))
this_moment
?now
now(tzone = "America/New_York")
now("America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-depart+hours(17)+minutes(34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,  "Asia/Hong_Kong" )
arrive
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install("RMySql")
install.packages("RMySql")
install.packages("RMySQL")
library(httr)
require(httpuv)
require(jsonlite)
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
require(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
stop_for_status(req)
myapp <- oauth_app("coursera-gettingandcleaning-quiz2",
key = "704500290e318d7f1392",
secret = "68b8a5e95c1eb4d35cce7be72dc6d436cc0fd377")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
output <- content(req)
output
list(output[[4]]$name, output[[4]]$created_at)
output[[4]]
list(output[[4]]$name, output[[4]]$created_at)
list(output[[3]]$name, output[[4]]$created_at)
list(output[[2]]$name, output[[4]]$created_at)
list(output[[1]]$name, output[[4]]$created_at)
list(output[[5]]$name, output[[4]]$created_at)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
list(output[[4]]$name, output[[4]]$created_at)
i = 4
list(output[[i]]$name, output[[i]]$created_at)
i=5
list(output[[i]]$name, output[[i]]$created_at)
url <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
download.file(url, f, method = "curl")
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages
install.packages("RMySql")
install.packages("RMySQL")
library("RMySQL")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
library("sqldf")
install.packages("sqldf")
library("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("RPostgreSQL")
library("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
mysql.server start
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
htmlCode
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
lines <- readLines(url, n=10)
lines <- readL
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("knitr")
install.packages("xtable")
library(swirl)
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
swirl()
33/36
deck
52
4/52
View(deck)
0
12/52
2/51
typeof(deck)
deck
deck$spades
deck[1,]
deck[,1]
names(deck)
tail(deck)
head(deck)
?c
c(0, 2:9, rep(10, 4))
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
cards <- c("Ace", "Deuce", "Three", "Four","Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
values <- c(0, 2:9, rep(10, 4))
deck <- expand.grid(cards=cards, suits=suits)
deck
deck$value <- values
deck
deck <- deck[rep(seq(nrow(deck)), 1),]
deck
names(deck)
swirl()
0
0
0
exit
submit()
submit()
play()
0
swirl()
0.5*0.8*1.6
0.64
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
1.4
sqrt(2)
library(swirl)
swirl()
?gather
stop()
quit()
swirl()
cran <- tbl_df(mydf)
library(swirl)
swirl()
.001*99.7/100
.001*98.5/100
(1-.001)*(1-98.5/100)
0.000985/(0.000985+0.014985)
(.997*.001) by (.997*.001 + .015*.999)
(.997*.001) . (.997*.001 + .015*.999)
(.997*.001) / (.997*.001 + .015*.999)
0.17-0.12+0.06
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(X*Prob)
sum(temp$X*temp$Prob)
temp
sum(Prob)
sum(temp)
Xmean <- sum(temp["X",] * temp["Prob",])
sum(temp["X",] * temp["Prob",])
sum(temp["X",] .* temp["Prob",])
temp["X",] * temp["Prob",]
t(temp["X",])
temp["X",] %*% t(temp["Prob",])
(1-0.3)*(1-0.52)
(1-0.3)*(1-0.52) + 0.75*0.3
0.75*0.3/ 0.561
data(mtcars)
t.test(mtcars$mpg)$conf.int
qt(.975, df = 8) * 1 / 3
qt(.975, df = 8)
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
t.test(m4, m6, var.equal = TRUE)$conf.int
?t.test
t.test(m4, m6, var.equal = TRUE, paired = TRUE)$conf.int
t.test(m4, m6, var.equal = TRUE)$conf.int
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(10000))
setwd("dev/coursera/Data Science/Statistical Inference//Project1")
?rexp
?abline
?dnorm
?dexp
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.2))
library("ggplot2")
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.2))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = dexp, arg = list(rate=1))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = dexp, arg = list(rate=5))
ggplot(data.frame(x = c(0, 2)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.2))
ggplot(data.frame(x = c(1)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.2))
ggplot(data.frame(x = c(1)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.1))
ggplot(data.frame(x = c(1)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.2))
ggplot(data.frame(x = c(1)), aes(x)) + stat_function(fun = dexp, arg = list(rate=0.5))
set.seed(1234)
lambda <- 0.2
nosim <- 1000
n <- 40
mns = NULL
for (i in 1 : nosim) mns = c(mns, mean(rexp(n, rate = lambda)))
base <- qplot(mns, geom = "density")
base
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 1/lambda, v=1/lambda/sqrt(n)))
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 1/lambda, var=1/lambda/sqrt(n)))
?dnorm
base + stat_function(fun = dnorm, colour = "red", arg = list(mean = 1/lambda, sd=1/lambda/sqrt(n)))
bp <- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot()
bp <- ggplot(data=mns, aes(x=group, y=weight, fill=group))
bp <- ggplot(data=mns)
mns
bp <- ggplot() + aes(mns) + geom_histogram(binwidth=1, colour="black", fill="white")
bp
bp <- ggplot() + aes(mns)
bp
bp <- ggplot() + aes(mns) + geom_abline()
bp
bp <- ggplot() + aes(mns) + geom_density()
bp
?ggplot
bp <- ggplot(geom="density") + aes(mns)
bp
bp <- ggplot() + aes(mns) + geom_density()
bp
bp + stat_function(fun = dnorm, colour = "red", arg = list(mean = 1/lambda, sd=1/lambda/sqrt(n)))
?qplot
?legend
?aes
bp
bp <- ggplot() + aes(mns) + geom_density()
bp
bp <- ggplot() + aes(mns, color = "sim") + geom_density()
bp
bp <- ggplot() + aes(mns) + geom_density(color="sim")
bp
bp <- ggplot() + aes(mns) + geom_density(color="theory")
bp
bp <- ggplot() + aes(mns, color = "tho=eory") + geom_density()
bp
var(mns)
1/(0.2*0.2)
1/(0.2*0.2)/sqrt(40)
0.2*0.2
/sqrt(40)
0.04/sqrt(40)
0.2
1/(0.2*0.2/sqrt(40))
0.2*0.2
1/(0.2*0.2*sqrt(40))
1/(0.2*0.2*40)
1/(lambda * lambda * n)
?var
sd(mns)
var(mns)
shapiro.test(mns)
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
qqplor(mns)
qqplot(mns)
qqplot(mns, rnorm(5,0.625))
qqnorm(row_means);
qqnorm(mns);
qqline(mns)
?ToothGrowth
ToothGrowth
data(ToothGrowth)
t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
t1
t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
t2
?t.test
t.test(len~dose, ToothGrowth, dose %in% c(1.0,0.5), paired = F, var.equal = T, alternative ="two.sided")
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == .5, ])
x <- ToothGrowth[ToothGrowth$dose == .5, ]
x
x <- ToothGrowth[ToothGrowth$dose == .5 & ToothGrowth$supp=VC, ]
x <- ToothGrowth[ToothGrowth$dose == .5 & ToothGrowth$supp='VC', ]
x <- ToothGrowth[ToothGrowth$dose == .5 && ToothGrowth$supp='VC', ]
x <- ToothGrowth[ToothGrowth$supp='VC', ]
x <- ToothGrowth[ToothGrowth$supp="VC", ]
x <- ToothGrowth[ToothGrowth$supp=VC, ]
x <- ToothGrowth[ToothGrowth$supp=`VC`, ]
x <- ToothGrowth[ToothGrowth$supp==VC, ]
x <- ToothGrowth[ToothGrowth$supp=='VC', ]
x
x <- ToothGrowth[ToothGrowth$dose == .5 & ToothGrowth$supp=='VC', ]
x
t.test(len~dose, ToothGrowth, dose %in% c(1.0,0.5), paired = F, var.equal = T, alternative ="two.sided")
t.test(len~dose, ToothGrowth, dose %in% c(1.0), paired = F, var.equal = T, alternative ="two.sided")
t.test(len~dose, ToothGrowth, dose %in% c(1.0), paired = F, var.equal = T, alternative ="two.sided")
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
x <- ToothGrowth[ToothGrowth$dose == .5 & ToothGrowth$supp=='VC', ]
y <- ToothGrowth[ToothGrowth$dose == .5 & ToothGrowth$supp=='OJ', ]
y
t.test(len$len-y$len, paired=F, var.equal=F, data=ToothGrowth)
t.test(x$len-y$len, paired=F, var.equal=F, data=ToothGrowth)
table(ToothGrowth$supp, ToothGrowth$dose)
boxplot(length~dose,data=ToothGrowth)
boxplot(len~dose,data=ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
boxplot(len~dose,data=ToothGrowth)
boxplot(len~dose+supp,data=ToothGrowth)
p <- ggplot(ToothGrowth, aes(len,factor(supp),dose))
p
p + geom_boxplot()
?geom_boxplot
p <- ggplot(ToothGrowth, aes(factor(supp)))
p
p + geom_boxplot()
p <- ggplot(ToothGrowth, aes(factor(supp)), x = dose, y=len)
p + geom_boxplot()
p + geom_boxplot() + facet_grid(.~bin, scales="free")
p + geom_boxplot() + facet_grid(.~supp, scales="free")
p <- ggplot(ToothGrowth, aes(factor(supp), x = dose, y=len))
p + geom_boxplot() + facet_grid(.~supp, scales="free")
p <- ggplot(ToothGrowth, aes(factor(supp), x = dose, y=len, fill=variable))
p + geom_boxplot() + facet_grid(.~supp, scales="free")
p <- ggplot(ToothGrowth, aes(factor(supp), x = dose, y=len, fill=supp))
p + geom_boxplot() + facet_grid(.~supp, scales="free")
p + geom_boxplot()
?ToothGrowth
p <- ggplot(ToothGrowth, aes(factor(supp), x = dose, y=len, fill=supp))
p + geom_boxplot() + labs(x="Vitamin C Dose levels [mg]")
package("knitr")
library("knitr")
knit2html(input = "part2.Rmd")
?ToothGrowth
split(ToothGrowth,list(ToothGrowth$dose,ToothGrowth$supp))
x <- split(ToothGrowth,list(ToothGrowth$dose,ToothGrowth$supp))
x
x$'2.VC'
tables <- split(ToothGrowth,list(ToothGrowth$dose,ToothGrowth$supp))
t.test(tables$'`0.5.VC`'$len - tables$'`0.5.OJ`'$len, paired=F, var.equal=F)
tables$'0.5.VC'$len
t.test(tables$'0.5.VC'$len - tables$'0.5.OJ'$len, paired=F, var.equal=F)
pt(-2.9791, 9)
pt(-2.9791, 9, lower.tail = F)
pt(-2.9791, 9)
pt(-2.9791, 18)
t.test(tables$'2.VC'$len - tables$'2.OJ'$len, paired=F, var.equal=F)
pt(0.0426, 9)
pt(0.426, 9)
pt(0.0426, 9)
?t.test
?pt
pt(0.0426, 9)
pt(0.00426, 9)
pt(0.000426, 9)
pt(1, 9)
pt(12, 9)
pt(12, 9, lower.tail = F)
pt(0.0426, 9, lower.tail = F)
pt(-3.3721, 9, lower.tail = F)
,
?geom_density
mns
geom_h
?set.seed
1/(0.2*0.2*40)
?shapiro.test
?qqplot
mean(sim_mean) + c(-1,1)*1.96*sd(sim_mean)/sqrt(n)
sample_mean<-mean(mns)
mean(sample_mean) + c(-1,1)*1.96*sd(mns)/sqrt(n)
5 + c(-1,1)*1.96*sqrt(0.625)/sqrt(n)
knit2pdf(input = "part1.Rmd")
