students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
x<-gather(stocks, stock, price, -time)
spread(x, stock, price)
gather(students3, class, grade, class1:class5, na.rm = TRUE)
submit()
extract_numeric("vlass5")
extract_numeric("class5")
?mutate
?extract_numeric
?mutate
?mutate
submit()
submit()
students4
submit()
submit()
submit()
?unique()
?unique
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed, failed)
sat
select(sat,-contains("total"))
x1<-select(sat,-contains("total"))
x1
x2<-gather(x1, part_sex, count, -score_range)
x2
separate(x2, part_sex)
separate(x2, part_sex, c("part", "sex"))
submit()
x3<-separate(x2, part_sex, c("part", "sex"))
x4<-group_by(x3, part, sex)
x4
?group_by
x3
x4
submit()
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1975)
mdy("March 12, 1975")
mdy
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=hour(now()), minutes=minute(now()))
this_moment
?now
now(tzone = "America/New_York")
now("America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-depart+hours(17)+minutes(34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,  "Asia/Hong_Kong" )
arrive
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install("RMySql")
install.packages("RMySql")
install.packages("RMySQL")
library(httr)
require(httpuv)
require(jsonlite)
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
require(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
stop_for_status(req)
myapp <- oauth_app("coursera-gettingandcleaning-quiz2",
key = "704500290e318d7f1392",
secret = "68b8a5e95c1eb4d35cce7be72dc6d436cc0fd377")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
output <- content(req)
output
list(output[[4]]$name, output[[4]]$created_at)
output[[4]]
list(output[[4]]$name, output[[4]]$created_at)
list(output[[3]]$name, output[[4]]$created_at)
list(output[[2]]$name, output[[4]]$created_at)
list(output[[1]]$name, output[[4]]$created_at)
list(output[[5]]$name, output[[4]]$created_at)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
list(output[[4]]$name, output[[4]]$created_at)
i = 4
list(output[[i]]$name, output[[i]]$created_at)
i=5
list(output[[i]]$name, output[[i]]$created_at)
url <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
download.file(url, f, method = "curl")
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages
install.packages("RMySql")
install.packages("RMySQL")
library("RMySQL")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
library("sqldf")
install.packages("sqldf")
library("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("RPostgreSQL")
library("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
mysql.server start
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
htmlCode
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
lines <- readLines(url, n=10)
lines <- readL
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("knitr")
install.packages("xtable")
library(swirl)
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
swirl()
33/36
deck
52
4/52
View(deck)
0
12/52
2/51
typeof(deck)
deck
deck$spades
deck[1,]
deck[,1]
names(deck)
tail(deck)
head(deck)
?c
c(0, 2:9, rep(10, 4))
suits <- c("Diamonds", "Clubs", "Hearts", "Spades")
cards <- c("Ace", "Deuce", "Three", "Four","Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")
values <- c(0, 2:9, rep(10, 4))
deck <- expand.grid(cards=cards, suits=suits)
deck
deck$value <- values
deck
deck <- deck[rep(seq(nrow(deck)), 1),]
deck
names(deck)
swirl()
0
0
0
exit
submit()
submit()
play()
0
swirl()
0.5*0.8*1.6
0.64
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
1.4
sqrt(2)
library(swirl)
swirl()
?gather
stop()
quit()
swirl()
cran <- tbl_df(mydf)
library(swirl)
swirl()
.001*99.7/100
.001*98.5/100
(1-.001)*(1-98.5/100)
0.000985/(0.000985+0.014985)
(.997*.001) by (.997*.001 + .015*.999)
(.997*.001) . (.997*.001 + .015*.999)
(.997*.001) / (.997*.001 + .015*.999)
0.17-0.12+0.06
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(X*Prob)
sum(temp$X*temp$Prob)
temp
sum(Prob)
sum(temp)
Xmean <- sum(temp["X",] * temp["Prob",])
sum(temp["X",] * temp["Prob",])
sum(temp["X",] .* temp["Prob",])
temp["X",] * temp["Prob",]
t(temp["X",])
temp["X",] %*% t(temp["Prob",])
(1-0.3)*(1-0.52)
(1-0.3)*(1-0.52) + 0.75*0.3
0.75*0.3/ 0.561
data(mtcars)
t.test(mtcars$mpg)$conf.int
qt(.975, df = 8) * 1 / 3
qt(.975, df = 8)
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
t.test(m4, m6, var.equal = TRUE)$conf.int
?t.test
t.test(m4, m6, var.equal = TRUE, paired = TRUE)$conf.int
t.test(m4, m6, var.equal = TRUE)$conf.int
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
test
1100 + c(-1, 1) * qt(0.975, df=9-1) * 30 / sqrt(9)
n <- 4
x <- 3
binom.test(x=x, n=n, alt="greater")
rate <- 1/100
errors <- 10
days <- 1787
?poisson.test
poisson.test(errors, T = days, r = rate, alt="less")
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
t.test(((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2))
t.test(((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2))
pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
?pt
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
?power.t.test
power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
power.t.test(power=0.9, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$n
install.packages("UsingR")
library(swirl)
install_from_swirl("Regression Models")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x);
summary(fit)
?pt
?power.t.test
?t.test
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit
summary(fit)
coef <- summary(fit)$coefficients
coef
newdata <- data.frame(x=c(mean(x)))
newdata
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
?predict
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(mean(x)))
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
p1
coef
?mtcars
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(3000)
p1 <- predict(fit, newdata, interval = ("confidence"))
print(p1)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
newdata <- data.frame(x=c(3000))
p1 <- predict(fit, newdata, interv/al = ("confidence"))
print(p1)
ewdata <- data.frame(x=3000)
p1 <- predict(fit, newdata, interv/al = ("confidence"))
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
ewdata <- data.frame(x=3)
p1 <- predict(fit, newdata, interval = ("confidence"))
p1
p1 <- predict(fit, newdata, interval = ("prediction"))
p1
newdata <- data.frame(x=3000/1000)
p2 <- predict(fit, newdata, interval = ("prediction"))
p2
p2 <- predict(fit, newdata, interval = ("confidence"))
p2
?predict
newdata <- data.frame(x=2000/1000)
p2 <- predict(fit, newdata, interval = ("confidence"))
p2
newdata <- data.frame(x=4000/1000)
p2
p2 <- predict(fit, newdata, interval = ("confidence"))
p2
26.59618
15.90724-26.59618
15.90724-28.36848
print(coef)
n <- length(x)
(coef[2,1] + coef[2,2] * qt(0.025, n-2)) * 2
coef[2,1]
coef[2,2]
(coef[2,1] - coef[2,2] * qt(0.025, n-2)) * 2
qt(0.025, n-2)
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
anova(fit)
anova(fit5)
278/1126
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~
parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child ~ parent)
fit<-lm(child ~ parent, galton)
fit$residuals
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
play()
?est
est
summary(est)
?est
??est
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
est(sltweak[n],ictweak[n])
est
nxt()
rhs=lhs
lhs-rhs
all.equal(lhs,rhs)
var()
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varChild)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
3
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
setwd("dev/coursera/Data Science/Regression Models/project/")
data(mtcars)
names(mtcars)
mtcars$am
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
mtcars$am
boxplot(mpg~am, data = mtcars,
col = c("dark grey", "light grey"),
xlab = "Transmission",
ylab = "Miles per Gallon",
main = "MPG by Transmission Type")
fit <- lm(mpg~am, data = mtcars)
summary(fit)
?par
?as.factor
data(mtcars)
mtcars$am
mtcars$am <- as.factor(mtcars$am, levels=c("Automatic", "Manual"))
mtcars$am <- factor(mtcars$am, levels=c("Automatic", "Manual"))
mtcars$am
data(mtcars)
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am
levels(mtcars$am)
data(mtcars)
mtcars$am <- as.factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
qplot(x=mpg, y=am, data=mtcars,  geom="bar", stat="identity",
fill=I("blue"), col=I("darkgreen"), alpha=I(.2), xlab="Year",
ylab="Number of Events", main="Total Number of Severe Weather Events by Year")
library(ggplot2)
￼p <- ggplot(), aes(factor(supp), x = dose, y=len, fill=supp))p + geom_boxplot() + labs(x="Vitamin C Dose levels [mg]", y="Tooth length")
p <- ggplot(mtcars, aes(am, x=am, y=mpg, fill=supp))
p
p <- ggplot(mtcars, aes(factor(am), x=am, y=mpg, fill=supp))
p
p + geom_boxplot()
p <- ggplot(mtcars, aes(factor(am), x=am, y=mpg, fill=am))
p + geom_boxplot()
p <- ggplot(mtcars, aes(factor(am), y=mpg, fill=am))
p + geom_boxplot()
p <- ggplot(mtcars, aes(factor(am), x="", y=mpg, fill=am))
p + geom_boxplot()
p <- ggplot(mtcars, aes(factor(am), y=mpg, fill=am))
p + geom_boxplot()
p <- ggplot(mtcars, aes(factor(am), x=am, y=mpg, fill=am))
p + geom_boxplot() + labs(x="Transmission Type", y="MPG")
p + geom_boxplot() + labs(x="Transmission Type", y="MPG", legend="bla")
p + geom_boxplot() + labs(x="Transmission Type", y="MPG")
p + geom_boxplot() + labs(x="Transmission Type", y="MPG") + scale_fill_discrete(name="Experimental\nCondition")
p + geom_boxplot() + labs(x="Transmission Type", y="MPG") + scale_fill_discrete(name="Transmission Type")
