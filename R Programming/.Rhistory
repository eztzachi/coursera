install.packages("KernSmooth")
load("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl
install_from_swirl("R Programming")
swirl()
1
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector()
x$set(1:7)
x$get
x$get()
cachemean(x)
cachemean(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
swirl()
num_vect<-[o.5,55,-10,6]
num_vect<-[0.5,55,-10,6]
num_vect<-(0.5,55,-10,6
num_vect<-(0.5,55,-10,6)
num_vect<-numeric(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
c("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"tzachi")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y <-
rnorm(1000)
z <-
rep(NA,1000)
y
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf -Inf
pwd()
pwd
gwd()
getwd()
setwd("/Users/tezra/dev/coursera/R Programming")
getwd()
source("Assignment2/ProgrammingAssignment2/cachematrix.R")
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
x <- makeCacheMatrix(m)
source("Assignment2/ProgrammingAssignment2/cachematrix.R")
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
source("Assignment2/ProgrammingAssignment2/cachematrix.R")
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inx * m
inv * m
m*inv
m
inv
m*inv
m
inv
m %*% inv
inv <- cacheSolve(x)
inv <- cacheSolve(x)
inv
x <- makeCacheMatrix()
x$get
x$get()
matrix()
numeric()
matrix(1)
matrix(4)
matrix(1,2)
matrix(4,2)
matrix(4,2,2)
x$set(m)
x$set(matrix(1:4,2,2))
x$get()
inv <- cacheSolve(x)
inv
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix()
x$get()
history
history()
source("Assignment2/ProgrammingAssignment2/cachematrix.R")
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
x<-rnorm(10)
x
f1<-gl(2,5)
f1
f2<-gl(5,2)
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
clear
clr
